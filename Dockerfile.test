# File: F:\OnGoinProject\Transport Management System\public-transport-management-system\Dockerfile.test

# Multi-stage build for smaller image size
FROM maven:3.9.4-eclipse-temurin-21-alpine AS builder

# Set working directory
WORKDIR /app

# Copy pom.xml and download dependencies first (better caching)
COPY pom.xml .
RUN mvn dependency:go-offline -B

# Copy source code and build
COPY src src
RUN mvn clean package -DskipTests -q

# Runtime stage - use smaller base image
FROM eclipse-temurin:21-jre-alpine

# Install curl and netcat for advanced health/readiness checks (lightweight)
RUN apk update && \
    apk add curl netcat-openbsd && \
    rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup -S appuser && adduser -S appuser -G appuser

# Set working directory
WORKDIR /app

# Copy the built jar from builder stage
COPY --from=builder /app/target/public-transport-management-system-*.jar app.jar

# Create the 'logs' directory and change its ownership
RUN mkdir -p logs && chown -R appuser:appuser logs

# Change ownership to non-root user
RUN chown appuser:appuser app.jar

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8080

# Health check (We'll ignore this for now, but leave it in)
HEALTHCHECK --interval=30s --timeout=3s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/actuator/health || exit 1

# JVM optimizations for container environment
ENV JAVA_OPTS="-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC -XX:+UseStringDeduplication"

# *** MODIFIED ENTRYPOINT: REMOVED DATABASE WAIT (nc) ***
# The Spring profile will be set to 'dev' which pulls connection details from application-dev.properties.
# Note: application-dev.properties uses `localhost:5432` for the DB, which assumes your database is running on the host machine.
ENTRYPOINT java $JAVA_OPTS -Dspring.profiles.active=dev -jar app.jar